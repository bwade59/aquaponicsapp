# coding: utf-8

"""
    Aquaponics (Papa's Igloo)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Conditions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currenttime': 'str',
        'feed': 'bool',
        'pump1': 'bool',
        'pump2': 'bool',
        'vent': 'bool',
        'fan': 'bool',
        'airheat': 'bool',
        'waterheat': 'bool',
        'lastfeeding': 'str',
        'waterph': 'float',
        'watertemp': 'float',
        'ambienttemp': 'float'
    }

    attribute_map = {
        'currenttime': 'currenttime',
        'feed': 'feed',
        'pump1': 'pump1',
        'pump2': 'pump2',
        'vent': 'vent',
        'fan': 'fan',
        'airheat': 'airheat',
        'waterheat': 'waterheat',
        'lastfeeding': 'lastfeeding',
        'waterph': 'waterph',
        'watertemp': 'watertemp',
        'ambienttemp': 'ambienttemp'
    }

    def __init__(self, currenttime=None, feed=None, pump1=None, pump2=None, vent=None, fan=None, airheat=None, waterheat=None, lastfeeding=None, waterph=None, watertemp=None, ambienttemp=None):
        """
        Conditions - a model defined in Swagger
        """

        self._currenttime = None
        self._feed = None
        self._pump1 = None
        self._pump2 = None
        self._vent = None
        self._fan = None
        self._airheat = None
        self._waterheat = None
        self._lastfeeding = None
        self._waterph = None
        self._watertemp = None
        self._ambienttemp = None

        if currenttime is not None:
          self.currenttime = currenttime
        if feed is not None:
          self.feed = feed
        if pump1 is not None:
          self.pump1 = pump1
        if pump2 is not None:
          self.pump2 = pump2
        if vent is not None:
          self.vent = vent
        if fan is not None:
          self.fan = fan
        if airheat is not None:
          self.airheat = airheat
        if waterheat is not None:
          self.waterheat = waterheat
        if lastfeeding is not None:
          self.lastfeeding = lastfeeding
        if waterph is not None:
          self.waterph = waterph
        if watertemp is not None:
          self.watertemp = watertemp
        if ambienttemp is not None:
          self.ambienttemp = ambienttemp

    @property
    def currenttime(self):
        """
        Gets the currenttime of this Conditions.

        :return: The currenttime of this Conditions.
        :rtype: str
        """
        return self._currenttime

    @currenttime.setter
    def currenttime(self, currenttime):
        """
        Sets the currenttime of this Conditions.

        :param currenttime: The currenttime of this Conditions.
        :type: str
        """

        self._currenttime = currenttime

    @property
    def feed(self):
        """
        Gets the feed of this Conditions.

        :return: The feed of this Conditions.
        :rtype: bool
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """
        Sets the feed of this Conditions.

        :param feed: The feed of this Conditions.
        :type: bool
        """

        self._feed = feed

    @property
    def pump1(self):
        """
        Gets the pump1 of this Conditions.

        :return: The pump1 of this Conditions.
        :rtype: bool
        """
        return self._pump1

    @pump1.setter
    def pump1(self, pump1):
        """
        Sets the pump1 of this Conditions.

        :param pump1: The pump1 of this Conditions.
        :type: bool
        """

        self._pump1 = pump1

    @property
    def pump2(self):
        """
        Gets the pump2 of this Conditions.

        :return: The pump2 of this Conditions.
        :rtype: bool
        """
        return self._pump2

    @pump2.setter
    def pump2(self, pump2):
        """
        Sets the pump2 of this Conditions.

        :param pump2: The pump2 of this Conditions.
        :type: bool
        """

        self._pump2 = pump2

    @property
    def vent(self):
        """
        Gets the vent of this Conditions.

        :return: The vent of this Conditions.
        :rtype: bool
        """
        return self._vent

    @vent.setter
    def vent(self, vent):
        """
        Sets the vent of this Conditions.

        :param vent: The vent of this Conditions.
        :type: bool
        """

        self._vent = vent

    @property
    def fan(self):
        """
        Gets the fan of this Conditions.

        :return: The fan of this Conditions.
        :rtype: bool
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """
        Sets the fan of this Conditions.

        :param fan: The fan of this Conditions.
        :type: bool
        """

        self._fan = fan

    @property
    def airheat(self):
        """
        Gets the airheat of this Conditions.

        :return: The airheat of this Conditions.
        :rtype: bool
        """
        return self._airheat

    @airheat.setter
    def airheat(self, airheat):
        """
        Sets the airheat of this Conditions.

        :param airheat: The airheat of this Conditions.
        :type: bool
        """

        self._airheat = airheat

    @property
    def waterheat(self):
        """
        Gets the waterheat of this Conditions.

        :return: The waterheat of this Conditions.
        :rtype: bool
        """
        return self._waterheat

    @waterheat.setter
    def waterheat(self, waterheat):
        """
        Sets the waterheat of this Conditions.

        :param waterheat: The waterheat of this Conditions.
        :type: bool
        """

        self._waterheat = waterheat

    @property
    def lastfeeding(self):
        """
        Gets the lastfeeding of this Conditions.

        :return: The lastfeeding of this Conditions.
        :rtype: str
        """
        return self._lastfeeding

    @lastfeeding.setter
    def lastfeeding(self, lastfeeding):
        """
        Sets the lastfeeding of this Conditions.

        :param lastfeeding: The lastfeeding of this Conditions.
        :type: str
        """

        self._lastfeeding = lastfeeding

    @property
    def waterph(self):
        """
        Gets the waterph of this Conditions.

        :return: The waterph of this Conditions.
        :rtype: float
        """
        return self._waterph

    @waterph.setter
    def waterph(self, waterph):
        """
        Sets the waterph of this Conditions.

        :param waterph: The waterph of this Conditions.
        :type: float
        """

        self._waterph = waterph

    @property
    def watertemp(self):
        """
        Gets the watertemp of this Conditions.

        :return: The watertemp of this Conditions.
        :rtype: float
        """
        return self._watertemp

    @watertemp.setter
    def watertemp(self, watertemp):
        """
        Sets the watertemp of this Conditions.

        :param watertemp: The watertemp of this Conditions.
        :type: float
        """

        self._watertemp = watertemp

    @property
    def ambienttemp(self):
        """
        Gets the ambienttemp of this Conditions.

        :return: The ambienttemp of this Conditions.
        :rtype: float
        """
        return self._ambienttemp

    @ambienttemp.setter
    def ambienttemp(self, ambienttemp):
        """
        Sets the ambienttemp of this Conditions.

        :param ambienttemp: The ambienttemp of this Conditions.
        :type: float
        """

        self._ambienttemp = ambienttemp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Conditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
